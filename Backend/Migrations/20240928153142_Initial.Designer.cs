// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.Data;
#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240928153142_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Shared.Entities.Species", b =>
                {
                    b.Property<int>("SpecimenNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("specimen_no");

                    b.Property<string>("AcceptedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accepted_name");

                    b.Property<int?>("AcceptedNo")
                        .HasColumnType("int")
                        .HasColumnName("accepted_no");

                    b.Property<string>("AcceptedRank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accepted_rank");

                    b.Property<string>("CollectionNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("collection_no");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<string>("Difference")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("difference");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flags");

                    b.Property<string>("IdentifiedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identified_name");

                    b.Property<int?>("IdentifiedNo")
                        .HasColumnType("int")
                        .HasColumnName("identified_no");

                    b.Property<string>("IdentifiedRank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identified_rank");

                    b.Property<string>("IsType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("is_type");

                    b.Property<string>("Magnification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("magnification");

                    b.Property<string>("MaxMa")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("max_ma");

                    b.Property<string>("MeasurementSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_source");

                    b.Property<string>("MinMa")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("min_ma");

                    b.Property<int?>("NMeasured")
                        .HasColumnType("int")
                        .HasColumnName("n_measured");

                    b.Property<string>("OccurrenceNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("occurrence_no");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("record_type");

                    b.Property<int?>("ReferenceNo")
                        .HasColumnType("int")
                        .HasColumnName("reference_no");

                    b.Property<int?>("ReidNo")
                        .HasColumnType("int")
                        .HasColumnName("reid_no");

                    b.Property<string>("SpeceltNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specelt_no");

                    b.Property<string>("SpecimenId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specimen_id");

                    b.Property<string>("SpecimenPart")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specimen_part");

                    b.Property<string>("SpecimenSex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specimen_sex");

                    b.Property<string>("SpecimenSide")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specimen_side");

                    b.Property<int>("taxaTaxonNo")
                        .HasColumnType("int");

                    b.HasKey("SpecimenNo");

                    b.HasIndex("AcceptedNo");

                    b.HasIndex("taxaTaxonNo");

                    b.ToTable("species");
                });

            modelBuilder.Entity("Shared.Models.Interval", b =>
                {
                    b.Property<int>("IntervalNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("interval_no");

                    b.Property<string>("Color")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("color");

                    b.Property<double?>("EndMYA")
                        .HasColumnType("double")
                        .HasColumnName("t_age");

                    b.Property<string>("IntervalName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("interval_name");

                    b.Property<string>("RecordType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("record_type");

                    b.Property<int?>("ReferenceNo")
                        .HasColumnType("int")
                        .HasColumnName("reference_no");

                    b.Property<int?>("ScaleNo")
                        .HasColumnType("int")
                        .HasColumnName("scale_no");

                    b.Property<double?>("StartMYA")
                        .HasColumnType("double")
                        .HasColumnName("b_age");

                    b.HasKey("IntervalNo");

                    b.ToTable("intervals", "paleo");
                });

            modelBuilder.Entity("Shared.Models.Occurrence", b =>
                {
                    b.Property<int>("OccurrenceNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("occurrence_no");

                    b.Property<string>("AcceptedName")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("accepted_name");

                    b.Property<int?>("AcceptedNo")
                        .HasColumnType("int")
                        .HasColumnName("accepted_no");

                    b.Property<string>("AcceptedRank")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("accepted_rank");

                    b.Property<string>("Cc")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("cc");

                    b.Property<string>("Class")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("class");

                    b.Property<int?>("CollectionNo")
                        .HasColumnType("int")
                        .HasColumnName("collection_no");

                    b.Property<string>("EarlyInterval")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("early_interval");

                    b.Property<string>("Family")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("family");

                    b.Property<string>("Genus")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("genus");

                    b.Property<string>("Geogscale")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("geogscale");

                    b.Property<string>("IdentifiedName")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("identified_name");

                    b.Property<int?>("IdentifiedNo")
                        .HasColumnType("int")
                        .HasColumnName("identified_no");

                    b.Property<string>("IdentifiedRank")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("identified_rank");

                    b.Property<string>("LateInterval")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("late_interval");

                    b.Property<string>("LatlngBasis")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("latlng_basis");

                    b.Property<double?>("LatlngPrecision")
                        .HasMaxLength(512)
                        .HasColumnType("double")
                        .HasColumnName("latlng_precision");

                    b.Property<double?>("MaxMya")
                        .HasColumnType("double")
                        .HasColumnName("t_age");

                    b.Property<double?>("MinMya")
                        .HasColumnType("double")
                        .HasColumnName("b_age");

                    b.Property<string>("Order")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("order");

                    b.Property<string>("Phylum")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("phylum");

                    b.Property<string>("RecordType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("record_type");

                    b.Property<int?>("ReferenceNo")
                        .HasColumnType("int")
                        .HasColumnName("reference_no");

                    b.HasKey("OccurrenceNo");

                    b.ToTable("occurrences", "paleo");
                });

            modelBuilder.Entity("Shared.Models.Taxa", b =>
                {
                    b.Property<int>("TaxonNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("taxon_no");

                    b.Property<string>("AcceptedName")
                        .HasColumnType("longtext")
                        .HasColumnName("accepted_name");

                    b.Property<int?>("AcceptedNo")
                        .HasColumnType("int");

                    b.Property<string>("AcceptedRank")
                        .HasColumnType("longtext")
                        .HasColumnName("accepted_rank");

                    b.Property<string>("IsExtant")
                        .HasColumnType("longtext")
                        .HasColumnName("is_extant");

                    b.Property<int?>("NumOccurances")
                        .HasColumnType("int")
                        .HasColumnName("n_occs");

                    b.Property<int?>("OccurrenceNo")
                        .HasColumnType("int");

                    b.Property<int?>("ParentNo")
                        .HasColumnType("int")
                        .HasColumnName("parent_no");

                    b.Property<string>("RecordType")
                        .HasColumnType("longtext")
                        .HasColumnName("record_type");

                    b.Property<int?>("ReferenceNo")
                        .HasColumnType("int")
                        .HasColumnName("reference_no");

                    b.Property<string>("TaxonAttr")
                        .HasColumnType("longtext")
                        .HasColumnName("taxon_attr");

                    b.Property<string>("TaxonName")
                        .HasColumnType("longtext")
                        .HasColumnName("taxon_name");

                    b.Property<string>("TaxonRank")
                        .HasColumnType("longtext")
                        .HasColumnName("taxon_rank");

                    b.HasKey("TaxonNo");

                    b.HasIndex("OccurrenceNo");

                    b.ToTable("taxa");
                });

            modelBuilder.Entity("Shared.Entities.Species", b =>
                {
                    b.HasOne("Shared.Models.Occurrence", "occurrence")
                        .WithMany()
                        .HasForeignKey("AcceptedNo");

                    b.HasOne("Shared.Models.Taxa", "taxa")
                        .WithMany()
                        .HasForeignKey("taxaTaxonNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("occurrence");

                    b.Navigation("taxa");
                });

            modelBuilder.Entity("Shared.Models.Taxa", b =>
                {
                    b.HasOne("Shared.Models.Occurrence", "Occurrence")
                        .WithMany()
                        .HasForeignKey("OccurrenceNo");

                    b.Navigation("Occurrence");
                });
#pragma warning restore 612, 618
        }
    }
}
